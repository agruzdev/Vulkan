#version 460
#extension GL_NV_ray_tracing : require

// https://github.com/iOrange/rtxON/blob/happy_triangle_fixed/src/shaders/ray_gen.glsl
// https://developer.nvidia.com/rtx/raytracing/vkray
//

layout(set = 0, binding = 0) uniform accelerationStructureNV Scene;
layout(set = 0, binding = 1, rgba8) uniform image2D ResultImage;

layout(set = 0, binding = 4) uniform CameraProperties
{
    mat4 viewInverse;
    mat4 projInverse;
} camera;

layout(location = 0) rayPayloadNV vec3 ResultColor;

vec3 traceSubSample(vec4 origin, vec4 target)
{
    vec4 direction = camera.viewInverse * vec4(normalize(target.xyz), 0.0f);

    const uint rayFlags = gl_RayFlagsNoneNV;
    const uint cullMask = 0xFF;
    const uint sbtRecordOffset = 0;
    const uint sbtRecordStride = 0;
    const uint missIndex = 0;
    const float tmin = 0.0f;
    const float tmax = 100.0f;
    const int payloadLocation = 0;

    traceNV(Scene, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, origin.xyz, tmin, direction.xyz, tmax, payloadLocation);

    return ResultColor;
}

void main()
{
#if 0
    vec2 offset[1];
    offset[0] = vec2(0.0f, 0.0f);
#else
    vec2 offset[4];
    offset[0] = vec2(-0.25f, -0.25f);
    offset[1] = vec2( 0.25f, -0.25f);
    offset[2] = vec2(-0.25f,  0.25f);
    offset[3] = vec2( 0.25f,  0.25f);
#endif

    vec4 origin = camera.viewInverse * vec4(0.0f, 0.0f, 0.0f, 1.0f);
    vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5f);

    vec3 rgb = vec3(0.0f);

    for (int i = 0; i < offset.length(); ++i)
    {
        vec2 inUV = (pixelCenter + offset[i]) / vec2(gl_LaunchSizeNV.xy);
        vec2 d = inUV * 2.0f - 1.0f;

        vec4 target = camera.projInverse * vec4(d.x, d.y, 1.0f, 1.0f);

        rgb += traceSubSample(origin, target);
    }

    rgb = clamp(rgb / offset.length(), 0.0f, 1.0f);

    imageStore(ResultImage, ivec2(gl_LaunchIDNV.xy), vec4(rgb, 1.0f));
}

