// Vulkan samples
// The MIT License (MIT)
// Copyright (c) 2016 Alexey Gruzdev

#version 450

layout(local_size_x = 1, local_size_y = 1) in;

layout(set = 0, binding = 0) uniform sampler2D inBuffer;
layout(set = 0, binding = 1, rgba32f) uniform image2D outBuffer;

vec3 getHeatMapColor(float value)
{
    const int NUM_COLORS = 6;
    const vec3 colors[NUM_COLORS] = { vec3(0.0 ,0.0, 0.5), vec3(0.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 0.0), vec3(1.0, 0.5, 0.0), vec3(1.0, 0.0, 0.0) };

    value = value * (NUM_COLORS - 1);
    const int idx1 = int(floor(value));
    const int idx2 = idx1 + 1;
  
    return mix(colors[idx1], colors[idx2], value - float(idx1));
}

void main() {
    const vec2 TC = vec2(float(gl_GlobalInvocationID.x) / gl_NumWorkGroups.x, float(gl_GlobalInvocationID.y) / gl_NumWorkGroups.y);
    float val = texture(inBuffer, TC).r;
    val = clamp(val / 512.0, 0.0, 1.0);
    const vec3 rgb = getHeatMapColor(val);
    imageStore(outBuffer, ivec2(gl_GlobalInvocationID), vec4(rgb, 1.0));
}
